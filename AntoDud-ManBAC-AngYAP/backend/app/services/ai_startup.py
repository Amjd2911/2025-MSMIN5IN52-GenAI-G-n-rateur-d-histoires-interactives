"""
Script de d√©marrage pour l'initialisation des services IA

Ce module g√®re le chargement et l'initialisation de tous les services IA
au d√©marrage de l'application. Il permet de :
- Charger les mod√®les de mani√®re asynchrone
- G√©rer les erreurs de chargement gracieusement
- Fournir un feedback sur l'√©tat des services
- Permettre un d√©marrage m√™me si certains mod√®les √©chouent

Utilisation :
- Appel√© automatiquement au d√©marrage de FastAPI
- Peut √™tre appel√© manuellement pour recharger les mod√®les
"""

import asyncio
import logging
from typing import Dict

from app.services.story_service import StoryService
from app.services.narrative_service import NarrativeService
from app.services.image_service import ImageService
from app.services.memory_service import MemoryService


# Configuration du logging pour le d√©marrage
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AIServicesManager:
    """
    Gestionnaire centralis√© des services IA
    
    Cette classe coordonne le chargement et l'√©tat de tous les services IA :
    - Narrative Service (g√©n√©ration de texte)
    - Image Service (g√©n√©ration d'images)
    - Memory Service (gestion de la m√©moire)
    - Story Service (orchestration g√©n√©rale)
    """
    
    def __init__(self):
        """
        Initialise le gestionnaire de services IA
        """
        self.services = {
            "narrative": NarrativeService(),
            "image": ImageService(),
            "memory": MemoryService(),
            "story": StoryService()
        }
        
        self.services_status: Dict[str, bool] = {
            "narrative": False,
            "image": False,
            "memory": True,  # MemoryService ne n√©cessite pas de chargement
            "story": False
        }
        
        self.initialization_completed = False
    
    async def initialize_all_services(self) -> Dict[str, bool]:
        """
        Initialise tous les services IA de mani√®re asynchrone
        
        Cette m√©thode :
        1. Lance le chargement des mod√®les en parall√®le quand possible
        2. G√®re les erreurs individuellement par service
        3. Continue m√™me si certains services √©chouent
        4. Retourne un rapport d'√©tat d√©taill√©
        
        Returns:
            Dict[str, bool]: √âtat de chargement de chaque service
        """
        logger.info("üöÄ D√©marrage de l'initialisation des services IA...")
        
        # Chargement des services qui n√©cessitent des mod√®les
        tasks = []
        
        # Narrative Service (mod√®le de texte)
        tasks.append(self._load_narrative_service())
        
        # Image Service (mod√®le d'images)
        tasks.append(self._load_image_service())
        
        # Story Service (orchestration - n√©cessite les autres services)
        # On l'initialise apr√®s les autres
        
        # Ex√©cution en parall√®le des chargements
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # Traitement des r√©sultats
        narrative_ok = not isinstance(results[0], Exception) and results[0]
        image_ok = not isinstance(results[1], Exception) and results[1]
        self.services_status["narrative"] = narrative_ok
        self.services_status["image"] = image_ok
        
        # Initialisation du Story Service une fois les autres charg√©s
        try:
            story_loaded = await self.services["story"].load_ai_models()
            self.services_status["story"] = story_loaded
        except Exception as e:
            logger.error(f"Erreur chargement Story Service: {str(e)}")
            self.services_status["story"] = False
        
        # Rapport final
        self.initialization_completed = True
        self._log_initialization_report()
        
        return self.services_status
    
    async def _load_narrative_service(self) -> bool:
        """
        Charge le service de g√©n√©ration narrative
        
        Returns:
            bool: True si le chargement a r√©ussi
        """
        try:
            logger.info("üìù Chargement du mod√®le de g√©n√©ration narrative...")
            success = await self.services["narrative"].load_model()
            
            if success:
                logger.info("‚úÖ Mod√®le de g√©n√©ration narrative charg√©")
            else:
                logger.warning("‚ö†Ô∏è √âchec mod√®le narratif - mode fallback activ√©")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement narratif: {str(e)}")
            return False
    
    async def _load_image_service(self) -> bool:
        """
        Charge le service de g√©n√©ration d'images
        
        Returns:
            bool: True si le chargement a r√©ussi
        """
        try:
            logger.info("üé® Chargement du mod√®le de g√©n√©ration d'images...")
            success = await self.services["image"].load_model()
            
            if success:
                logger.info("‚úÖ Mod√®le de g√©n√©ration d'images charg√©")
            else:
                logger.warning("‚ö†Ô∏è √âchec mod√®le images - g√©n√©ration d√©sactiv√©e")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement images: {str(e)}")
            return False
    
    def _log_initialization_report(self) -> None:
        """
        Affiche un rapport d√©taill√© de l'initialisation
        """
        logger.info("\n" + "="*60)
        logger.info("üìä RAPPORT D'INITIALISATION DES SERVICES IA")
        logger.info("="*60)
        
        for service_name, status in self.services_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            status_text = "ACTIF" if status else "INACTIF"
            service_display = service_name.upper()
            logger.info(f"{status_icon} {service_display:<12} : {status_text}")
        
        # R√©sum√© global
        active_count = sum(self.services_status.values())
        total_count = len(self.services_status)
        
        logger.info("-"*60)
        logger.info(f"üìà Services actifs: {active_count}/{total_count}")
        
        if active_count == total_count:
            logger.info("üéâ Tous les services IA sont op√©rationnels!")
        elif active_count > 0:
            logger.info("‚ö° Application pr√™te avec services partiels")
        else:
            logger.warning("‚ö†Ô∏è Aucun service IA disponible - mode d√©grad√©")
        
        logger.info("="*60 + "\n")
    
    def get_services_status(self) -> Dict[str, bool]:
        """
        Retourne l'√©tat actuel de tous les services
        
        Returns:
            Dict[str, bool]: √âtat de chaque service
        """
        return self.services_status.copy()
    
    def is_service_ready(self, service_name: str) -> bool:
        """
        V√©rifie si un service sp√©cifique est pr√™t
        
        Args:
            service_name: Nom du service √† v√©rifier
            
        Returns:
            bool: True si le service est pr√™t
        """
        return self.services_status.get(service_name, False)
    
    def get_ready_services_count(self) -> tuple[int, int]:
        """
        Retourne le nombre de services pr√™ts / total
        
        Returns:
            tuple[int, int]: (services_pr√™ts, total_services)
        """
        ready = sum(self.services_status.values())
        total = len(self.services_status)
        return ready, total


# Instance globale du gestionnaire de services
ai_services_manager = AIServicesManager()


async def initialize_ai_services() -> Dict[str, bool]:
    """
    Fonction publique pour initialiser tous les services IA
    
    Cette fonction est appel√©e au d√©marrage de l'application FastAPI
    pour charger tous les mod√®les n√©cessaires.
    
    Returns:
        Dict[str, bool]: √âtat de chargement de chaque service
    """
    return await ai_services_manager.initialize_all_services()


def get_ai_services_status() -> Dict[str, bool]:
    """
    Retourne l'√©tat actuel des services IA
    
    Returns:
        Dict[str, bool]: √âtat de chaque service
    """
    return ai_services_manager.get_services_status()


def is_ai_service_ready(service_name: str) -> bool:
    """
    V√©rifie si un service IA sp√©cifique est pr√™t
    
    Args:
        service_name: Nom du service ("narrative", "image", "memory", "story")
        
    Returns:
        bool: True si le service est op√©rationnel
    """
    return ai_services_manager.is_service_ready(service_name)