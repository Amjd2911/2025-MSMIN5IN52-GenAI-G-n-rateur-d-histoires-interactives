#!/usr/bin/env python3
"""
Test de simulation CUDA pour v√©rifier le comportement avec et sans GPU
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(__file__))

print("=" * 70)
print("TEST DE SIMULATION - D√âTECTION CUDA")
print("=" * 70)

# Test 1: Configuration avec device='auto'
print("\nüìã Test 1: Configuration avec device='auto'")
print("-" * 70)

from app.config import settings

print(f"Configuration actuelle:")
print(f"  TEXT_MODEL_DEVICE = '{settings.TEXT_MODEL_DEVICE}'")
print(f"  IMAGE_MODEL_DEVICE = '{settings.IMAGE_MODEL_DEVICE}'")

# Test 2: Simulation de d√©tection CUDA
print("\nüéÆ Test 2: Simulation de la logique de d√©tection")
print("-" * 70)

class MockDetector:
    """Simule la d√©tection de device"""
    
    @staticmethod
    def detect_device(device_setting: str, cuda_available: bool) -> str:
        """Simule la logique de _detect_device"""
        if device_setting.lower() == "auto":
            if cuda_available:
                print("  üéÆ CUDA d√©tect√©! GPU disponibles: 1, Nom: NVIDIA GeForce RTX 3080")
                return "cuda"
            else:
                print("  üíª CUDA non disponible, utilisation du CPU")
                return "cpu"
        else:
            return device_setting.lower()

# Simulation sans CUDA
print("\nSc√©nario A: Syst√®me SANS CUDA (situation actuelle dans ce test)")
device_a = MockDetector.detect_device("auto", cuda_available=False)
print(f"  R√©sultat: device = '{device_a}'")

# Simulation avec CUDA
print("\nSc√©nario B: Syst√®me AVEC CUDA disponible (carte NVIDIA)")
device_b = MockDetector.detect_device("auto", cuda_available=True)
print(f"  R√©sultat: device = '{device_b}'")

# Simulation forc√©e CPU
print("\nSc√©nario C: Forcer CPU (device='cpu')")
device_c = MockDetector.detect_device("cpu", cuda_available=True)
print(f"  R√©sultat: device = '{device_c}' (m√™me avec CUDA disponible)")

# Simulation forc√©e CUDA
print("\nSc√©nario D: Forcer CUDA (device='cuda')")
device_d = MockDetector.detect_device("cuda", cuda_available=False)
print(f"  R√©sultat: device = '{device_d}' (attention: √©chouera si pas de CUDA)")

# Test 3: V√©rification des chemins
print("\nüìÅ Test 3: V√©rification des chemins de donn√©es")
print("-" * 70)

import pathlib

backend_dir = pathlib.Path(__file__).parent.resolve()
stories_path = pathlib.Path(settings.STORIES_PATH)
images_path = pathlib.Path(settings.IMAGES_PATH)

print(f"R√©pertoire backend: {backend_dir}")
print(f"Chemin stories: {stories_path}")
print(f"Chemin images: {images_path}")

# V√©rifier que les chemins sont dans le backend
stories_correct = str(backend_dir) in str(stories_path.resolve())
images_correct = str(backend_dir) in str(images_path.resolve())

print(f"\n‚úì Validation:")
print(f"  Stories dans backend/: {'‚úÖ CORRECT' if stories_correct else '‚ùå INCORRECT'}")
print(f"  Images dans backend/: {'‚úÖ CORRECT' if images_correct else '‚ùå INCORRECT'}")

# Afficher la structure attendue
print(f"\nStructure de r√©pertoires attendue:")
print(f"  {backend_dir}/")
print(f"  ‚îú‚îÄ‚îÄ data/")
print(f"  ‚îÇ   ‚îú‚îÄ‚îÄ stories/  ‚Üê {stories_path}")
print(f"  ‚îÇ   ‚îî‚îÄ‚îÄ images/   ‚Üê {images_path}")
print(f"  ‚îî‚îÄ‚îÄ logs/")

# Test 4: R√©sum√© des corrections
print("\n" + "=" * 70)
print("R√âSUM√â DES CORRECTIONS")
print("=" * 70)

print("\n‚úÖ Correction 1: D√©tection CUDA automatique")
print("   - device='auto' d√©tecte automatiquement GPU/CPU")
print("   - Avec CUDA disponible: utilise le GPU")
print("   - Sans CUDA: utilise le CPU")
print("   - Peut √™tre forc√© avec device='cuda' ou device='cpu'")

print("\n‚úÖ Correction 2: Emplacement du r√©pertoire data")
print("   - Avant: ./data (relatif au r√©pertoire d'ex√©cution)")
print("   - Apr√®s: backend/data (absolu, calcul√© automatiquement)")
print(f"   - R√©sultat: {stories_path.parent}")

print("\nüìå Pour utiliser avec votre GPU NVIDIA:")
print("   1. Assurez-vous que PyTorch avec CUDA est install√©")
print("   2. V√©rifiez: python -c \"import torch; print(torch.cuda.is_available())\"")
print("   3. Le syst√®me utilisera automatiquement le GPU avec device='auto'")

print("\n" + "=" * 70)
print("FIN DU TEST")
print("=" * 70)
